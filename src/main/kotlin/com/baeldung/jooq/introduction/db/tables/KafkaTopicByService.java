/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.KafkaTopicByServiceRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KafkaTopicByService extends TableImpl<KafkaTopicByServiceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE</code>
     */
    public static final KafkaTopicByService KAFKA_TOPIC_BY_SERVICE = new KafkaTopicByService();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KafkaTopicByServiceRecord> getRecordType() {
        return KafkaTopicByServiceRecord.class;
    }

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.SERVICE_ID</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> SERVICE_ID = createField(DSL.name("SERVICE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.PROFILE_ID</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> PROFILE_ID = createField(DSL.name("PROFILE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.TOPIC_ID</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> TOPIC_ID = createField(DSL.name("TOPIC_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.STAND</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> STAND = createField(DSL.name("STAND"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.DERRECTION</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, String> DERRECTION = createField(DSL.name("DERRECTION"), SQLDataType.CHAR(3), this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.TOPIC_NAME</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> TOPIC_NAME = createField(DSL.name("TOPIC_NAME"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.GRP_PROP</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> GRP_PROP = createField(DSL.name("GRP_PROP"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE.PROPERTY_KEY</code>.
     */
    public final TableField<KafkaTopicByServiceRecord, Object> PROPERTY_KEY = createField(DSL.name("PROPERTY_KEY"), SQLDataType.OTHER, this, "");

    private KafkaTopicByService(Name alias, Table<KafkaTopicByServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private KafkaTopicByService(Name alias, Table<KafkaTopicByServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE</code> table reference
     */
    public KafkaTopicByService(String alias) {
        this(DSL.name(alias), KAFKA_TOPIC_BY_SERVICE);
    }

    /**
     * Create an aliased <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE</code> table reference
     */
    public KafkaTopicByService(Name alias) {
        this(alias, KAFKA_TOPIC_BY_SERVICE);
    }

    /**
     * Create a <code>LOCALDEV.KAFKA_TOPIC_BY_SERVICE</code> table reference
     */
    public KafkaTopicByService() {
        this(DSL.name("KAFKA_TOPIC_BY_SERVICE"), null);
    }

    public <O extends Record> KafkaTopicByService(Table<O> child, ForeignKey<O, KafkaTopicByServiceRecord> key) {
        super(child, key, KAFKA_TOPIC_BY_SERVICE);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public KafkaTopicByService as(String alias) {
        return new KafkaTopicByService(DSL.name(alias), this);
    }

    @Override
    public KafkaTopicByService as(Name alias) {
        return new KafkaTopicByService(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public KafkaTopicByService rename(String name) {
        return new KafkaTopicByService(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public KafkaTopicByService rename(Name name) {
        return new KafkaTopicByService(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Object, Object, Object, Object, String, Object, Object, Object> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
