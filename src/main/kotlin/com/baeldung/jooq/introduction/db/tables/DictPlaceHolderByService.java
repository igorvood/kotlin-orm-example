/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Keys;
import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.DictPlaceHolderByServiceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictPlaceHolderByService extends TableImpl<DictPlaceHolderByServiceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE</code>
     */
    public static final DictPlaceHolderByService DICT_PLACE_HOLDER_BY_SERVICE = new DictPlaceHolderByService();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictPlaceHolderByServiceRecord> getRecordType() {
        return DictPlaceHolderByServiceRecord.class;
    }

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE.SERVICE_ID</code>.
     */
    public final TableField<DictPlaceHolderByServiceRecord, Object> SERVICE_ID = createField(DSL.name("SERVICE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE.PROFILE_ID</code>.
     */
    public final TableField<DictPlaceHolderByServiceRecord, Object> PROFILE_ID = createField(DSL.name("PROFILE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE.STAND_ID</code>.
     */
    public final TableField<DictPlaceHolderByServiceRecord, Object> STAND_ID = createField(DSL.name("STAND_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE.PLACE_HOLDER_ID</code>.
     */
    public final TableField<DictPlaceHolderByServiceRecord, Object> PLACE_HOLDER_ID = createField(DSL.name("PLACE_HOLDER_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE.VALUE</code>.
     */
    public final TableField<DictPlaceHolderByServiceRecord, Object> VALUE = createField(DSL.name("VALUE"), SQLDataType.OTHER, this, "");

    private DictPlaceHolderByService(Name alias, Table<DictPlaceHolderByServiceRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictPlaceHolderByService(Name alias, Table<DictPlaceHolderByServiceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE</code> table reference
     */
    public DictPlaceHolderByService(String alias) {
        this(DSL.name(alias), DICT_PLACE_HOLDER_BY_SERVICE);
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE</code> table reference
     */
    public DictPlaceHolderByService(Name alias) {
        this(alias, DICT_PLACE_HOLDER_BY_SERVICE);
    }

    /**
     * Create a <code>LOCALDEV.DICT_PLACE_HOLDER_BY_SERVICE</code> table reference
     */
    public DictPlaceHolderByService() {
        this(DSL.name("DICT_PLACE_HOLDER_BY_SERVICE"), null);
    }

    public <O extends Record> DictPlaceHolderByService(Table<O> child, ForeignKey<O, DictPlaceHolderByServiceRecord> key) {
        super(child, key, DICT_PLACE_HOLDER_BY_SERVICE);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public UniqueKey<DictPlaceHolderByServiceRecord> getPrimaryKey() {
        return Keys.PK_DICT_PLACE_HOLDER_BY_SERVICE;
    }

    @Override
    public List<UniqueKey<DictPlaceHolderByServiceRecord>> getKeys() {
        return Arrays.<UniqueKey<DictPlaceHolderByServiceRecord>>asList(Keys.PK_DICT_PLACE_HOLDER_BY_SERVICE);
    }

    @Override
    public DictPlaceHolderByService as(String alias) {
        return new DictPlaceHolderByService(DSL.name(alias), this);
    }

    @Override
    public DictPlaceHolderByService as(Name alias) {
        return new DictPlaceHolderByService(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictPlaceHolderByService rename(String name) {
        return new DictPlaceHolderByService(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictPlaceHolderByService rename(Name name) {
        return new DictPlaceHolderByService(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Object, Object, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
