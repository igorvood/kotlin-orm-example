/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Keys;
import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.MetaStandRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetaStand extends TableImpl<MetaStandRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.META_STAND</code>
     */
    public static final MetaStand META_STAND = new MetaStand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetaStandRecord> getRecordType() {
        return MetaStandRecord.class;
    }

    /**
     * The column <code>LOCALDEV.META_STAND.ID</code>.
     */
    public final TableField<MetaStandRecord, Object> ID = createField(DSL.name("ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.META_STAND.DESCRIPTION</code>.
     */
    public final TableField<MetaStandRecord, Object> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.META_STAND.IS_LOCAL</code>.
     */
    public final TableField<MetaStandRecord, Object> IS_LOCAL = createField(DSL.name("IS_LOCAL"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.META_STAND.REPLACMENT_FOR_TOPIC_NAME</code>.
     */
    public final TableField<MetaStandRecord, Object> REPLACMENT_FOR_TOPIC_NAME = createField(DSL.name("REPLACMENT_FOR_TOPIC_NAME"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.META_STAND.CNT_PARTITION</code>.
     */
    public final TableField<MetaStandRecord, Object> CNT_PARTITION = createField(DSL.name("CNT_PARTITION"), SQLDataType.OTHER, this, "");

    private MetaStand(Name alias, Table<MetaStandRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetaStand(Name alias, Table<MetaStandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LOCALDEV.META_STAND</code> table reference
     */
    public MetaStand(String alias) {
        this(DSL.name(alias), META_STAND);
    }

    /**
     * Create an aliased <code>LOCALDEV.META_STAND</code> table reference
     */
    public MetaStand(Name alias) {
        this(alias, META_STAND);
    }

    /**
     * Create a <code>LOCALDEV.META_STAND</code> table reference
     */
    public MetaStand() {
        this(DSL.name("META_STAND"), null);
    }

    public <O extends Record> MetaStand(Table<O> child, ForeignKey<O, MetaStandRecord> key) {
        super(child, key, META_STAND);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public UniqueKey<MetaStandRecord> getPrimaryKey() {
        return Keys.PK_META_STAND;
    }

    @Override
    public List<UniqueKey<MetaStandRecord>> getKeys() {
        return Arrays.<UniqueKey<MetaStandRecord>>asList(Keys.PK_META_STAND);
    }

    @Override
    public MetaStand as(String alias) {
        return new MetaStand(DSL.name(alias), this);
    }

    @Override
    public MetaStand as(Name alias) {
        return new MetaStand(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaStand rename(String name) {
        return new MetaStand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetaStand rename(Name name) {
        return new MetaStand(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Object, Object, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
