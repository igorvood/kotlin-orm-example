/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.ResolvablePlaceholderRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ResolvablePlaceholder extends TableImpl<ResolvablePlaceholderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.RESOLVABLE_PLACEHOLDER</code>
     */
    public static final ResolvablePlaceholder RESOLVABLE_PLACEHOLDER = new ResolvablePlaceholder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResolvablePlaceholderRecord> getRecordType() {
        return ResolvablePlaceholderRecord.class;
    }

    /**
     * The column <code>LOCALDEV.RESOLVABLE_PLACEHOLDER.SERVICE_ID</code>.
     */
    public final TableField<ResolvablePlaceholderRecord, Object> SERVICE_ID = createField(DSL.name("SERVICE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.RESOLVABLE_PLACEHOLDER.PROFILE_ID</code>.
     */
    public final TableField<ResolvablePlaceholderRecord, Object> PROFILE_ID = createField(DSL.name("PROFILE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.RESOLVABLE_PLACEHOLDER.STAND</code>.
     */
    public final TableField<ResolvablePlaceholderRecord, Object> STAND = createField(DSL.name("STAND"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.RESOLVABLE_PLACEHOLDER.PLACEHOLDER_ID</code>.
     */
    public final TableField<ResolvablePlaceholderRecord, Object> PLACEHOLDER_ID = createField(DSL.name("PLACEHOLDER_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.RESOLVABLE_PLACEHOLDER.PLACEHOLDER_VALUE</code>.
     */
    public final TableField<ResolvablePlaceholderRecord, Object> PLACEHOLDER_VALUE = createField(DSL.name("PLACEHOLDER_VALUE"), SQLDataType.OTHER, this, "");

    private ResolvablePlaceholder(Name alias, Table<ResolvablePlaceholderRecord> aliased) {
        this(alias, aliased, null);
    }

    private ResolvablePlaceholder(Name alias, Table<ResolvablePlaceholderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>LOCALDEV.RESOLVABLE_PLACEHOLDER</code> table reference
     */
    public ResolvablePlaceholder(String alias) {
        this(DSL.name(alias), RESOLVABLE_PLACEHOLDER);
    }

    /**
     * Create an aliased <code>LOCALDEV.RESOLVABLE_PLACEHOLDER</code> table reference
     */
    public ResolvablePlaceholder(Name alias) {
        this(alias, RESOLVABLE_PLACEHOLDER);
    }

    /**
     * Create a <code>LOCALDEV.RESOLVABLE_PLACEHOLDER</code> table reference
     */
    public ResolvablePlaceholder() {
        this(DSL.name("RESOLVABLE_PLACEHOLDER"), null);
    }

    public <O extends Record> ResolvablePlaceholder(Table<O> child, ForeignKey<O, ResolvablePlaceholderRecord> key) {
        super(child, key, RESOLVABLE_PLACEHOLDER);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public ResolvablePlaceholder as(String alias) {
        return new ResolvablePlaceholder(DSL.name(alias), this);
    }

    @Override
    public ResolvablePlaceholder as(Name alias) {
        return new ResolvablePlaceholder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ResolvablePlaceholder rename(String name) {
        return new ResolvablePlaceholder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ResolvablePlaceholder rename(Name name) {
        return new ResolvablePlaceholder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Object, Object, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
