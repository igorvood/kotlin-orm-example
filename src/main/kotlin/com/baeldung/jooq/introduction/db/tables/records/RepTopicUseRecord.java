/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables.records;


import com.baeldung.jooq.introduction.db.tables.RepTopicUse;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RepTopicUseRecord extends TableRecordImpl<RepTopicUseRecord> implements Record3<Object, Object, Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LOCALDEV.REP_TOPIC_USE.GRAPH_ID</code>.
     */
    public RepTopicUseRecord setGraphId(Object value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.REP_TOPIC_USE.GRAPH_ID</code>.
     */
    public Object getGraphId() {
        return get(0);
    }

    /**
     * Setter for <code>LOCALDEV.REP_TOPIC_USE.TOPIC_ID</code>.
     */
    public RepTopicUseRecord setTopicId(Object value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.REP_TOPIC_USE.TOPIC_ID</code>.
     */
    public Object getTopicId() {
        return get(1);
    }

    /**
     * Setter for <code>LOCALDEV.REP_TOPIC_USE.USED</code>.
     */
    public RepTopicUseRecord setUsed(Object value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.REP_TOPIC_USE.USED</code>.
     */
    public Object getUsed() {
        return get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Object, Object, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Object, Object, Object> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Object> field1() {
        return RepTopicUse.REP_TOPIC_USE.GRAPH_ID;
    }

    @Override
    public Field<Object> field2() {
        return RepTopicUse.REP_TOPIC_USE.TOPIC_ID;
    }

    @Override
    public Field<Object> field3() {
        return RepTopicUse.REP_TOPIC_USE.USED;
    }

    @Override
    public Object component1() {
        return getGraphId();
    }

    @Override
    public Object component2() {
        return getTopicId();
    }

    @Override
    public Object component3() {
        return getUsed();
    }

    @Override
    public Object value1() {
        return getGraphId();
    }

    @Override
    public Object value2() {
        return getTopicId();
    }

    @Override
    public Object value3() {
        return getUsed();
    }

    @Override
    public RepTopicUseRecord value1(Object value) {
        setGraphId(value);
        return this;
    }

    @Override
    public RepTopicUseRecord value2(Object value) {
        setTopicId(value);
        return this;
    }

    @Override
    public RepTopicUseRecord value3(Object value) {
        setUsed(value);
        return this;
    }

    @Override
    public RepTopicUseRecord values(Object value1, Object value2, Object value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RepTopicUseRecord
     */
    public RepTopicUseRecord() {
        super(RepTopicUse.REP_TOPIC_USE);
    }

    /**
     * Create a detached, initialised RepTopicUseRecord
     */
    public RepTopicUseRecord(Object graphId, Object topicId, Object used) {
        super(RepTopicUse.REP_TOPIC_USE);

        setGraphId(graphId);
        setTopicId(topicId);
        setUsed(used);
    }
}
