/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables.records;


import com.baeldung.jooq.introduction.db.tables.DictAbstractGraphNode;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictAbstractGraphNodeRecord extends UpdatableRecordImpl<DictAbstractGraphNodeRecord> implements Record3<Object, Object, Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LOCALDEV.DICT_ABSTRACT_GRAPH_NODE.GRAPH_ID</code>.
     */
    public DictAbstractGraphNodeRecord setGraphId(Object value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_ABSTRACT_GRAPH_NODE.GRAPH_ID</code>.
     */
    public Object getGraphId() {
        return get(0);
    }

    /**
     * Setter for <code>LOCALDEV.DICT_ABSTRACT_GRAPH_NODE.NODE_TYPE</code>.
     */
    public DictAbstractGraphNodeRecord setNodeType(Object value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_ABSTRACT_GRAPH_NODE.NODE_TYPE</code>.
     */
    public Object getNodeType() {
        return get(1);
    }

    /**
     * Setter for <code>LOCALDEV.DICT_ABSTRACT_GRAPH_NODE.NODE_ID</code>.
     */
    public DictAbstractGraphNodeRecord setNodeId(Object value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_ABSTRACT_GRAPH_NODE.NODE_ID</code>.
     */
    public Object getNodeId() {
        return get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record3<Object, Object, Object> key() {
        return (Record3) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Object, Object, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Object, Object, Object> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Object> field1() {
        return DictAbstractGraphNode.DICT_ABSTRACT_GRAPH_NODE.GRAPH_ID;
    }

    @Override
    public Field<Object> field2() {
        return DictAbstractGraphNode.DICT_ABSTRACT_GRAPH_NODE.NODE_TYPE;
    }

    @Override
    public Field<Object> field3() {
        return DictAbstractGraphNode.DICT_ABSTRACT_GRAPH_NODE.NODE_ID;
    }

    @Override
    public Object component1() {
        return getGraphId();
    }

    @Override
    public Object component2() {
        return getNodeType();
    }

    @Override
    public Object component3() {
        return getNodeId();
    }

    @Override
    public Object value1() {
        return getGraphId();
    }

    @Override
    public Object value2() {
        return getNodeType();
    }

    @Override
    public Object value3() {
        return getNodeId();
    }

    @Override
    public DictAbstractGraphNodeRecord value1(Object value) {
        setGraphId(value);
        return this;
    }

    @Override
    public DictAbstractGraphNodeRecord value2(Object value) {
        setNodeType(value);
        return this;
    }

    @Override
    public DictAbstractGraphNodeRecord value3(Object value) {
        setNodeId(value);
        return this;
    }

    @Override
    public DictAbstractGraphNodeRecord values(Object value1, Object value2, Object value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DictAbstractGraphNodeRecord
     */
    public DictAbstractGraphNodeRecord() {
        super(DictAbstractGraphNode.DICT_ABSTRACT_GRAPH_NODE);
    }

    /**
     * Create a detached, initialised DictAbstractGraphNodeRecord
     */
    public DictAbstractGraphNodeRecord(Object graphId, Object nodeType, Object nodeId) {
        super(DictAbstractGraphNode.DICT_ABSTRACT_GRAPH_NODE);

        setGraphId(graphId);
        setNodeType(nodeType);
        setNodeId(nodeId);
    }
}
