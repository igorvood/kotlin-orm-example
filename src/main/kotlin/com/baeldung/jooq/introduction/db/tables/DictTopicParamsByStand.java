/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Keys;
import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.DictTopicParamsByStandRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictTopicParamsByStand extends TableImpl<DictTopicParamsByStandRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND</code>
     */
    public static final DictTopicParamsByStand DICT_TOPIC_PARAMS_BY_STAND = new DictTopicParamsByStand();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictTopicParamsByStandRecord> getRecordType() {
        return DictTopicParamsByStandRecord.class;
    }

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND.NODE_ID</code>.
     */
    public final TableField<DictTopicParamsByStandRecord, Object> NODE_ID = createField(DSL.name("NODE_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND.STAND_ID</code>.
     */
    public final TableField<DictTopicParamsByStandRecord, Object> STAND_ID = createField(DSL.name("STAND_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND.CNT_PARTITION</code>.
     */
    public final TableField<DictTopicParamsByStandRecord, Object> CNT_PARTITION = createField(DSL.name("CNT_PARTITION"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND.TOPIC_NAME</code>.
     */
    public final TableField<DictTopicParamsByStandRecord, Object> TOPIC_NAME = createField(DSL.name("TOPIC_NAME"), SQLDataType.OTHER, this, "");

    private DictTopicParamsByStand(Name alias, Table<DictTopicParamsByStandRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictTopicParamsByStand(Name alias, Table<DictTopicParamsByStandRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND</code> table reference
     */
    public DictTopicParamsByStand(String alias) {
        this(DSL.name(alias), DICT_TOPIC_PARAMS_BY_STAND);
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND</code> table reference
     */
    public DictTopicParamsByStand(Name alias) {
        this(alias, DICT_TOPIC_PARAMS_BY_STAND);
    }

    /**
     * Create a <code>LOCALDEV.DICT_TOPIC_PARAMS_BY_STAND</code> table reference
     */
    public DictTopicParamsByStand() {
        this(DSL.name("DICT_TOPIC_PARAMS_BY_STAND"), null);
    }

    public <O extends Record> DictTopicParamsByStand(Table<O> child, ForeignKey<O, DictTopicParamsByStandRecord> key) {
        super(child, key, DICT_TOPIC_PARAMS_BY_STAND);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public UniqueKey<DictTopicParamsByStandRecord> getPrimaryKey() {
        return Keys.PK_DICT_TOPIC_PARAMS_BY_STAND;
    }

    @Override
    public List<UniqueKey<DictTopicParamsByStandRecord>> getKeys() {
        return Arrays.<UniqueKey<DictTopicParamsByStandRecord>>asList(Keys.PK_DICT_TOPIC_PARAMS_BY_STAND);
    }

    @Override
    public DictTopicParamsByStand as(String alias) {
        return new DictTopicParamsByStand(DSL.name(alias), this);
    }

    @Override
    public DictTopicParamsByStand as(Name alias) {
        return new DictTopicParamsByStand(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictTopicParamsByStand rename(String name) {
        return new DictTopicParamsByStand(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictTopicParamsByStand rename(Name name) {
        return new DictTopicParamsByStand(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Object, Object, Object, Object> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
