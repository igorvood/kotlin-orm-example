/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Keys;
import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.DictPlaceHolderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictPlaceHolder extends TableImpl<DictPlaceHolderRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.DICT_PLACE_HOLDER</code>
     */
    public static final DictPlaceHolder DICT_PLACE_HOLDER = new DictPlaceHolder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictPlaceHolderRecord> getRecordType() {
        return DictPlaceHolderRecord.class;
    }

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER.ID</code>.
     */
    public final TableField<DictPlaceHolderRecord, Object> ID = createField(DSL.name("ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER.DESCRIPTION</code>.
     */
    public final TableField<DictPlaceHolderRecord, Object> DESCRIPTION = createField(DSL.name("DESCRIPTION"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_PLACE_HOLDER.DEFAULT_VALUE</code>.
     */
    public final TableField<DictPlaceHolderRecord, Object> DEFAULT_VALUE = createField(DSL.name("DEFAULT_VALUE"), SQLDataType.OTHER, this, "");

    private DictPlaceHolder(Name alias, Table<DictPlaceHolderRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictPlaceHolder(Name alias, Table<DictPlaceHolderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_PLACE_HOLDER</code> table reference
     */
    public DictPlaceHolder(String alias) {
        this(DSL.name(alias), DICT_PLACE_HOLDER);
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_PLACE_HOLDER</code> table reference
     */
    public DictPlaceHolder(Name alias) {
        this(alias, DICT_PLACE_HOLDER);
    }

    /**
     * Create a <code>LOCALDEV.DICT_PLACE_HOLDER</code> table reference
     */
    public DictPlaceHolder() {
        this(DSL.name("DICT_PLACE_HOLDER"), null);
    }

    public <O extends Record> DictPlaceHolder(Table<O> child, ForeignKey<O, DictPlaceHolderRecord> key) {
        super(child, key, DICT_PLACE_HOLDER);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public UniqueKey<DictPlaceHolderRecord> getPrimaryKey() {
        return Keys.PK_DICT_PLACE_HOLDER;
    }

    @Override
    public List<UniqueKey<DictPlaceHolderRecord>> getKeys() {
        return Arrays.<UniqueKey<DictPlaceHolderRecord>>asList(Keys.PK_DICT_PLACE_HOLDER);
    }

    @Override
    public DictPlaceHolder as(String alias) {
        return new DictPlaceHolder(DSL.name(alias), this);
    }

    @Override
    public DictPlaceHolder as(Name alias) {
        return new DictPlaceHolder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictPlaceHolder rename(String name) {
        return new DictPlaceHolder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictPlaceHolder rename(Name name) {
        return new DictPlaceHolder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Object, Object, Object> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
