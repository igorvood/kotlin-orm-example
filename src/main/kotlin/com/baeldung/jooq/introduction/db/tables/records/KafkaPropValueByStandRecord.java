/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables.records;


import com.baeldung.jooq.introduction.db.tables.KafkaPropValueByStand;

import org.jooq.Field;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KafkaPropValueByStandRecord extends TableRecordImpl<KafkaPropValueByStandRecord> implements Record5<Object, Object, Object, Object, Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.GRP_ID</code>.
     */
    public KafkaPropValueByStandRecord setGrpId(Object value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.GRP_ID</code>.
     */
    public Object getGrpId() {
        return get(0);
    }

    /**
     * Setter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.TYPE_PROP</code>.
     */
    public KafkaPropValueByStandRecord setTypeProp(Object value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.TYPE_PROP</code>.
     */
    public Object getTypeProp() {
        return get(1);
    }

    /**
     * Setter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.PROP_ID</code>.
     */
    public KafkaPropValueByStandRecord setPropId(Object value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.PROP_ID</code>.
     */
    public Object getPropId() {
        return get(2);
    }

    /**
     * Setter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.STAND</code>.
     */
    public KafkaPropValueByStandRecord setStand(Object value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.STAND</code>.
     */
    public Object getStand() {
        return get(3);
    }

    /**
     * Setter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.PROPERTY_VAL</code>.
     */
    public KafkaPropValueByStandRecord setPropertyVal(Object value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.KAFKA_PROP_VALUE_BY_STAND.PROPERTY_VAL</code>.
     */
    public Object getPropertyVal() {
        return get(4);
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, Object, Object, Object, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Object, Object, Object, Object, Object> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Object> field1() {
        return KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND.GRP_ID;
    }

    @Override
    public Field<Object> field2() {
        return KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND.TYPE_PROP;
    }

    @Override
    public Field<Object> field3() {
        return KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND.PROP_ID;
    }

    @Override
    public Field<Object> field4() {
        return KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND.STAND;
    }

    @Override
    public Field<Object> field5() {
        return KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND.PROPERTY_VAL;
    }

    @Override
    public Object component1() {
        return getGrpId();
    }

    @Override
    public Object component2() {
        return getTypeProp();
    }

    @Override
    public Object component3() {
        return getPropId();
    }

    @Override
    public Object component4() {
        return getStand();
    }

    @Override
    public Object component5() {
        return getPropertyVal();
    }

    @Override
    public Object value1() {
        return getGrpId();
    }

    @Override
    public Object value2() {
        return getTypeProp();
    }

    @Override
    public Object value3() {
        return getPropId();
    }

    @Override
    public Object value4() {
        return getStand();
    }

    @Override
    public Object value5() {
        return getPropertyVal();
    }

    @Override
    public KafkaPropValueByStandRecord value1(Object value) {
        setGrpId(value);
        return this;
    }

    @Override
    public KafkaPropValueByStandRecord value2(Object value) {
        setTypeProp(value);
        return this;
    }

    @Override
    public KafkaPropValueByStandRecord value3(Object value) {
        setPropId(value);
        return this;
    }

    @Override
    public KafkaPropValueByStandRecord value4(Object value) {
        setStand(value);
        return this;
    }

    @Override
    public KafkaPropValueByStandRecord value5(Object value) {
        setPropertyVal(value);
        return this;
    }

    @Override
    public KafkaPropValueByStandRecord values(Object value1, Object value2, Object value3, Object value4, Object value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KafkaPropValueByStandRecord
     */
    public KafkaPropValueByStandRecord() {
        super(KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND);
    }

    /**
     * Create a detached, initialised KafkaPropValueByStandRecord
     */
    public KafkaPropValueByStandRecord(Object grpId, Object typeProp, Object propId, Object stand, Object propertyVal) {
        super(KafkaPropValueByStand.KAFKA_PROP_VALUE_BY_STAND);

        setGrpId(grpId);
        setTypeProp(typeProp);
        setPropId(propId);
        setStand(stand);
        setPropertyVal(propertyVal);
    }
}
