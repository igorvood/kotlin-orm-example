/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables.records;


import com.baeldung.jooq.introduction.db.tables.DictService;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictServiceRecord extends UpdatableRecordImpl<DictServiceRecord> implements Record2<Object, Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LOCALDEV.DICT_SERVICE.ID</code>.
     */
    public DictServiceRecord setId(Object value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_SERVICE.ID</code>.
     */
    public Object getId() {
        return get(0);
    }

    /**
     * Setter for <code>LOCALDEV.DICT_SERVICE.MAIN_CLASS</code>.
     */
    public DictServiceRecord setMainClass(Object value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_SERVICE.MAIN_CLASS</code>.
     */
    public Object getMainClass() {
        return get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Object> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Object, Object> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Object, Object> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Object> field1() {
        return DictService.DICT_SERVICE.ID;
    }

    @Override
    public Field<Object> field2() {
        return DictService.DICT_SERVICE.MAIN_CLASS;
    }

    @Override
    public Object component1() {
        return getId();
    }

    @Override
    public Object component2() {
        return getMainClass();
    }

    @Override
    public Object value1() {
        return getId();
    }

    @Override
    public Object value2() {
        return getMainClass();
    }

    @Override
    public DictServiceRecord value1(Object value) {
        setId(value);
        return this;
    }

    @Override
    public DictServiceRecord value2(Object value) {
        setMainClass(value);
        return this;
    }

    @Override
    public DictServiceRecord values(Object value1, Object value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DictServiceRecord
     */
    public DictServiceRecord() {
        super(DictService.DICT_SERVICE);
    }

    /**
     * Create a detached, initialised DictServiceRecord
     */
    public DictServiceRecord(Object id, Object mainClass) {
        super(DictService.DICT_SERVICE);

        setId(id);
        setMainClass(mainClass);
    }
}
