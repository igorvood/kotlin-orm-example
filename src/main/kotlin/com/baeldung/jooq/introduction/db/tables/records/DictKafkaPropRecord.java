/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables.records;


import com.baeldung.jooq.introduction.db.tables.DictKafkaProp;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictKafkaPropRecord extends UpdatableRecordImpl<DictKafkaPropRecord> implements Record2<Object, Object> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>LOCALDEV.DICT_KAFKA_PROP.TYPE_PROP</code>.
     */
    public DictKafkaPropRecord setTypeProp(Object value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_KAFKA_PROP.TYPE_PROP</code>.
     */
    public Object getTypeProp() {
        return get(0);
    }

    /**
     * Setter for <code>LOCALDEV.DICT_KAFKA_PROP.PROP_ID</code>.
     */
    public DictKafkaPropRecord setPropId(Object value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>LOCALDEV.DICT_KAFKA_PROP.PROP_ID</code>.
     */
    public Object getPropId() {
        return get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Object, Object> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Object, Object> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Object, Object> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Object> field1() {
        return DictKafkaProp.DICT_KAFKA_PROP.TYPE_PROP;
    }

    @Override
    public Field<Object> field2() {
        return DictKafkaProp.DICT_KAFKA_PROP.PROP_ID;
    }

    @Override
    public Object component1() {
        return getTypeProp();
    }

    @Override
    public Object component2() {
        return getPropId();
    }

    @Override
    public Object value1() {
        return getTypeProp();
    }

    @Override
    public Object value2() {
        return getPropId();
    }

    @Override
    public DictKafkaPropRecord value1(Object value) {
        setTypeProp(value);
        return this;
    }

    @Override
    public DictKafkaPropRecord value2(Object value) {
        setPropId(value);
        return this;
    }

    @Override
    public DictKafkaPropRecord values(Object value1, Object value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DictKafkaPropRecord
     */
    public DictKafkaPropRecord() {
        super(DictKafkaProp.DICT_KAFKA_PROP);
    }

    /**
     * Create a detached, initialised DictKafkaPropRecord
     */
    public DictKafkaPropRecord(Object typeProp, Object propId) {
        super(DictKafkaProp.DICT_KAFKA_PROP);

        setTypeProp(typeProp);
        setPropId(propId);
    }
}
