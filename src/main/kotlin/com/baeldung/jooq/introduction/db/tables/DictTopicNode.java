/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Keys;
import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.DictTopicNodeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictTopicNode extends TableImpl<DictTopicNodeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.DICT_TOPIC_NODE</code>
     */
    public static final DictTopicNode DICT_TOPIC_NODE = new DictTopicNode();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictTopicNodeRecord> getRecordType() {
        return DictTopicNodeRecord.class;
    }

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.ID</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> ID = createField(DSL.name("ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.NODE_TYPE</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> NODE_TYPE = createField(DSL.name("NODE_TYPE"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.IS_OUR</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> IS_OUR = createField(DSL.name("IS_OUR"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.PRODUCER_PROP_GRP</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> PRODUCER_PROP_GRP = createField(DSL.name("PRODUCER_PROP_GRP"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.PRODUCER_PROP_GRP_REF</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> PRODUCER_PROP_GRP_REF = createField(DSL.name("PRODUCER_PROP_GRP_REF"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.PRD_TYPE</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> PRD_TYPE = createField(DSL.name("PRD_TYPE"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.CONSUMER_PROP_GRP</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> CONSUMER_PROP_GRP = createField(DSL.name("CONSUMER_PROP_GRP"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.CONSUMER_PROP_GRP_REF</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> CONSUMER_PROP_GRP_REF = createField(DSL.name("CONSUMER_PROP_GRP_REF"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_NODE.CNS_TYPE</code>.
     */
    public final TableField<DictTopicNodeRecord, Object> CNS_TYPE = createField(DSL.name("CNS_TYPE"), SQLDataType.OTHER, this, "");

    private DictTopicNode(Name alias, Table<DictTopicNodeRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictTopicNode(Name alias, Table<DictTopicNodeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_TOPIC_NODE</code> table reference
     */
    public DictTopicNode(String alias) {
        this(DSL.name(alias), DICT_TOPIC_NODE);
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_TOPIC_NODE</code> table reference
     */
    public DictTopicNode(Name alias) {
        this(alias, DICT_TOPIC_NODE);
    }

    /**
     * Create a <code>LOCALDEV.DICT_TOPIC_NODE</code> table reference
     */
    public DictTopicNode() {
        this(DSL.name("DICT_TOPIC_NODE"), null);
    }

    public <O extends Record> DictTopicNode(Table<O> child, ForeignKey<O, DictTopicNodeRecord> key) {
        super(child, key, DICT_TOPIC_NODE);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public UniqueKey<DictTopicNodeRecord> getPrimaryKey() {
        return Keys.PK_DICT_TOPIC_NODE;
    }

    @Override
    public List<UniqueKey<DictTopicNodeRecord>> getKeys() {
        return Arrays.<UniqueKey<DictTopicNodeRecord>>asList(Keys.PK_DICT_TOPIC_NODE);
    }

    @Override
    public DictTopicNode as(String alias) {
        return new DictTopicNode(DSL.name(alias), this);
    }

    @Override
    public DictTopicNode as(Name alias) {
        return new DictTopicNode(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictTopicNode rename(String name) {
        return new DictTopicNode(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictTopicNode rename(Name name) {
        return new DictTopicNode(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Object, Object, Object, Object, Object, Object, Object, Object, Object> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
