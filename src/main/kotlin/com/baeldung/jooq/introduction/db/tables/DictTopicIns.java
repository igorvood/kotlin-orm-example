/*
 * This file is generated by jOOQ.
 */
package com.baeldung.jooq.introduction.db.tables;


import com.baeldung.jooq.introduction.db.Localdev;
import com.baeldung.jooq.introduction.db.tables.records.DictTopicInsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictTopicIns extends TableImpl<DictTopicInsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>LOCALDEV.DICT_TOPIC_INS</code>
     */
    public static final DictTopicIns DICT_TOPIC_INS = new DictTopicIns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictTopicInsRecord> getRecordType() {
        return DictTopicInsRecord.class;
    }

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_INS.GRAPH_ID</code>.
     */
    public final TableField<DictTopicInsRecord, Object> GRAPH_ID = createField(DSL.name("GRAPH_ID"), SQLDataType.OTHER, this, "");

    /**
     * The column <code>LOCALDEV.DICT_TOPIC_INS.NODE_ID</code>.
     */
    public final TableField<DictTopicInsRecord, Object> NODE_ID = createField(DSL.name("NODE_ID"), SQLDataType.OTHER, this, "");

    private DictTopicIns(Name alias, Table<DictTopicInsRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictTopicIns(Name alias, Table<DictTopicInsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view());
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_TOPIC_INS</code> table reference
     */
    public DictTopicIns(String alias) {
        this(DSL.name(alias), DICT_TOPIC_INS);
    }

    /**
     * Create an aliased <code>LOCALDEV.DICT_TOPIC_INS</code> table reference
     */
    public DictTopicIns(Name alias) {
        this(alias, DICT_TOPIC_INS);
    }

    /**
     * Create a <code>LOCALDEV.DICT_TOPIC_INS</code> table reference
     */
    public DictTopicIns() {
        this(DSL.name("DICT_TOPIC_INS"), null);
    }

    public <O extends Record> DictTopicIns(Table<O> child, ForeignKey<O, DictTopicInsRecord> key) {
        super(child, key, DICT_TOPIC_INS);
    }

    @Override
    public Schema getSchema() {
        return Localdev.LOCALDEV;
    }

    @Override
    public DictTopicIns as(String alias) {
        return new DictTopicIns(DSL.name(alias), this);
    }

    @Override
    public DictTopicIns as(Name alias) {
        return new DictTopicIns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictTopicIns rename(String name) {
        return new DictTopicIns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictTopicIns rename(Name name) {
        return new DictTopicIns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Object, Object> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
